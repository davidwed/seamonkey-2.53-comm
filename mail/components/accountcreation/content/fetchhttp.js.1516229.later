--- fetchhttp.js
+++ fetchhttp.js
@@ -163,19 +163,16 @@ FetchHTTP.prototype =
     } else if (this._args.bodyFormArgs) {
       mimetype = "application/x-www-form-urlencoded; charset=UTF-8";
       body = "";
       for (let name in this._args.bodyFormArgs) {
         body += (body ? "&" : "") + name + "=" +
             encodeURIComponent(this._args.bodyFormArgs[name]);
       }
     }
-    if (body) {
-      this._logger.info("with body:\n" + body);
-    }
 
     // Headers
     if (mimetype && !("Content-Type" in this._args.headers)) {
       request.setRequestHeader("Content-Type", mimetype);
     }
     if (username && password) {
       // workaround, because open(..., username, password) does not work.
       request.setRequestHeader("Authorization", "Basic " + btoa(username + ":" + password));
@@ -185,17 +182,16 @@ FetchHTTP.prototype =
       if (name == "Cookie") {
         // Websites are not allowed to set this, but chrome is.
         // Nevertheless, the cookie lib later overwrites our header.
         // request.channel.setCookie(this._args.headers[name]); -- crashes
         // So, deactivate that Firefox cookie lib.
         request.channel.loadFlags |= Ci.nsIRequest.LOAD_ANONYMOUS;
       }
     }
-    this._logger.info(debugObject(this._args, "args"));
 
     var me = this;
     request.onload = function() { me._response(true); };
     request.onerror = function() { me._response(false); };
     request.ontimeout = function() { me._response(false); };
     request.send(body);
     // Store the original stack so we can use it if there is an exception
     this._callStack = Error().stack;
