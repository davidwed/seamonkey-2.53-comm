/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * The contents of this file are subject to the Netscape Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 1998 Netscape Communications Corporation. All
 * Rights Reserved.
 *
 * Contributor(s): 
 */

#include "nsISupports.idl"

interface inISearchObserver;
interface nsISupportsArray;

[scriptable, uuid(D5FA765B-2448-4686-B7C1-5FF13ACB0FC9)]
interface inISearchProcess : nsISupports
{
  // indicates if an asynchronous search is in progress
  readonly attribute boolean isActive;

  // the number of results returned 
  readonly attribute long resultCount;

  // for optimization when doing an async search, this will optionally
  // destroy old results, assuming they will be fetched as soon as 
  // the observer is notified of their presence.  If true, then indices
  // pass to the get*ResultAt methods will return null for any index
  // other than the most recent one, and getResults will return null always.
  attribute boolean holdResults;

  // start a synchronous search
  void searchSync();

  // start an asynchronous search
  void searchAsync(in inISearchObserver aObserver);

  // command an async process to stop immediately
  void searchStop();

  // performs a step in the asynchronous search loop
  // return indicates true if loop is done, false if it should continue
  // This is there only for the benefit of asynchronous search controllers,
  // and is not for use by those who just wish to call searchAsync
  boolean searchStep();

  // methods for getting results of specific types
  
  wstring getStringResultAt(in long aIndex);
  
  long getIntResultAt(in long aIndex);
  
  unsigned long getUIntResultAt(in long aIndex);
};
